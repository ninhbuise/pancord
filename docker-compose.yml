version: "3"

services:
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD
    command: server --console-address ":9001" /store
    volumes:
      - ./minio-data:/store
    ports:
      - "9000:9000"
      - "9001:9001"

  postgres:
    image: postgres:latest
    container_name: pancordb
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL
      - PGADMIN_DEFAULT_PASSWORD
      - PGADMIN_LISTEN_PORT
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  awslocal:
    image: amazon/aws-cli
    container_name: awslocal
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - "-c"
      - |
        while !  curl -o /dev/null -s -w "%{http_code}\n" http://minio:9000/minio/health/live | grep -q '200'; do
        echo 'Waiting for MinIO to be ready...';
        sleep 5;
        done &&
        echo 'MinIO is healthy.' &&
        echo 'Listing S3 buckets...' &&
        if aws --endpoint-url=http://minio:9000 s3 ls | grep -q 'il-panda-bucket'; then
        echo 'Bucket \"il-panda-bucket\" already exists.';
        else
        echo 'Bucket \"il-panda-bucket\" does not exist. Creating it...';
        aws --endpoint-url=http://minio:9000 s3 mb s3://il-panda-bucket &&
        echo 'Bucket \"il-panda-bucket\" created successfully.';
        fi
        if aws --endpoint-url=http://minio:9000 s3 ls | grep -q 'il-panda-private-bucket'; then
        echo 'Bucket \"il-panda-private-bucket\" already exists.';
        else
        echo 'Bucket \"il-panda-private-bucket\" does not exist. Creating it...';
        aws --endpoint-url=http://minio:9000 s3 mb s3://il-panda-private-bucket &&
        echo 'Bucket \"il-panda-private-bucket\" created successfully.';
        fi
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
    depends_on:
      - minio

volumes:
  store:
  postgres-data:
  pgadmin-data:
